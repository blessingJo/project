package com.opule.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;

//user name is already used in sql

@Entity //JPA annotation, ORM framework inspects and analyzes the class' information such as class names, colsumn names and data types for the purpose of mapping
@NamedQueries ({
	@NamedQuery(name = "Users.findAll", query = "SELECT u FROM Users u ORDER BY u.fullName"),// : colon indicates a placeholder for a parameter - :email is defined in UserDAO
	@NamedQuery(name = "Users.countAll", query = "SELECT Count(*) FROM Users u"),
	// colon indicates defined parameter
	@NamedQuery(name = "Users.findByEmail", query = "SELECT u FROM Users u WHERE u.email = :email"),
	//checklogin query
	@NamedQuery(name = "Users.checkLogin", query = "SELECT u FROM Users u WHERE u.email = :email AND password = :password")

})
//@Table(name = "table name") only used if the class name is diff to table name in db
public class Users {
	//fields mapped to the columns in the users table
	private  Integer userId;
	//email address format
	private  String email;
	private  String fullName;
	private  String password;
	
	public Users() {
	
	} 
	
	public Users(String email, String fullName, String password) {
		super();
		this.email = email;
		this.fullName = fullName;
		this.password = password;
	}
	
	public Users(Integer userId, String email, String fullName, String password) {
		this(email,fullName,password);
		this.userId = userId;
	}
	//another overload constructor that accepts updated user 

	@Column(name = "user_id") //JPA annotation used to specify the column name in the database because userId is different to the name in the database
	@Id //Used because user_Id is a PRIMARY KEY
	//Unique values for the userIdgenerated by the database (auto increment)
	@GeneratedValue(strategy = GenerationType.IDENTITY) //generationType.IDENTITY specifies that the generated values are unique in the table level 
	public Integer getUserId() {
		return userId;
	}
	
	//no need for JPA annotation because Hibernate framework automatically detects and maps the fields that have the same names as the ones in the database
	public void setUserId(Integer userId) {
		this.userId = userId;
	}
	
	public String getEmail() {
		return email;
	}
	
	public void setEmail(String email) {
		this.email = email;
	}
	
	@Column(name = "full_name") //JPA annotation because the full_Name field is different to the one in the database
	public String getFullName() {
		return fullName;
	}
	
	public void setFullName(String fullName) {
		this.fullName = fullName;
	}
	
	public String getPassword() {
		return password;
	}
	
	public void setPassword(String password) {
		this.password = password;
	} 
	

}
